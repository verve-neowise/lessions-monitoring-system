generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id   Int    @id @default(autoincrement())
  name String

  status EntityStatus @default(active)

  users      User[]
  groups     Group[]
  directions Direction[]
  criterias  Criteria[]
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  password String

  permissions Permission[]

  status EntityStatus @default(active)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  admin   Admin?
  student Student?
  teacher Teacher?
}

model Admin {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  name String

  status EntityStatus @default(active)
}

model Student {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  name     String
  surname  String
  birthday DateTime
  phone    String

  groups      Group[]
  assessments Assessment[]

  status EntityStatus @default(active)
}

model Teacher {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  name    String
  surname String
  phone   String

  groups Group[]

  directions Direction[]

  status EntityStatus @default(active)
}

model Group {
  id Int @id @default(autoincrement())

  name String

  direction   Direction @relation(fields: [directionId], references: [id])
  directionId Int

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  months Int

  students Student[]
  lessons  Lesson[]
  assessment Assessment[]

  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?

  status     EntityStatus @default(active)
}

model Direction {
  id   Int    @id @default(autoincrement())
  name String

  groups   Group[]
  teachers Teacher[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  status EntityStatus @default(active)
}

model Lesson {
  id Int @id @default(autoincrement())

  title String
  date  DateTime

  criteria Criteria @relation(fields: [criteriaId], references: [id])

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  material   Material @relation(fields: [materialId], references: [id])
  materialId Int      @unique

  type LessonType

  assessments Assessment[]
  criteriaId  Int
}

model Material {
  id Int @id @default(autoincrement())

  content String

  status EntityStatus @default(active)

  lessonId Lesson?
}

model Criteria {
  id      Int @id @default(autoincrement())
  maximum Int

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  status EntityStatus @default(active)

  scroings Scoring[]
  Lesson   Lesson[]
}

model Scoring {
  id          Int    @id @default(autoincrement())
  value       Int
  description String

  criteria   Criteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  criteriaId Int
}

model Assessment {
  id Int @id @default(autoincrement())

  group Group @relation(fields: [groupId], references: [id])
  groupId Int

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int    @map("lessonId")

  comment String
  color   String @default("black")
  score   Int
}

enum Permission {
  student
  teacher
  admin
  surpervisor
}

enum EntityStatus {
  active
  disabled
  deleted
}

enum LessonType {
  lesson
  practice
  exam
}
